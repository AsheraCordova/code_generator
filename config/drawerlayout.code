class DrawerLayout {
	class ViewDragHelper {
	    public static final int STATE_IDLE = 0;
    	public static final int STATE_DRAGGING = 1;
    	public static final int STATE_SETTLING = 2;
    	private static final int EDGE_SIZE = 20; // dp
    	private int mDragState;
    	private int mEdgeSize;
    	private final int mDefaultEdgeSize;
    	public int getViewDragState() {
        	return mDragState;
    	}
    	public void cancel() {
		}
    	public ViewDragHelper(r.android.content.Context context) {
        	final float density = context.getResources().getDisplayMetrics().density;
    		mDefaultEdgeSize = (int) (EDGE_SIZE * density + 0.5f);
    	}
    	
    	public int getDefaultEdgeSize() {
        	return mDefaultEdgeSize;
    	}
    	
    	public void setEdgeSize(int size) {
        	mEdgeSize = size;
    	}
    	public void smoothSlideViewTo(View drawerView, int x, int y) {
    		DrawerLayout.this.smoothSlideViewTo(drawerView, x, y);
		}

	}
	class WindowInsetsCompat {
		public int getSystemWindowInsetLeft() {
			return 0;
		}
	
		public WindowInsetsCompat replaceSystemWindowInsets(int systemWindowInsetLeft, int systemWindowInsetTop,
				int systemWindowInsetRight, int systemWindowInsetBottom) {
			return null;
		}

		public int getSystemWindowInsetBottom() {
			return 0;
		}
	
		public int getSystemWindowInsetRight() {
			return 0;
		}
	
		public int getSystemWindowInsetTop() {
			return 0;
		}
  
  		public r.android.graphics.Insets getSystemGestureInsets() {
			return null;
		}
	}
	
	 public DrawerLayout() {
        final float density = getResources().getDisplayMetrics().density;
        mMinDrawerMargin = (int) (MIN_DRAWER_MARGIN * density + 0.5f);
        mLeftDragger = new ViewDragHelper(getContext());
        mRightDragger = new ViewDragHelper(getContext());
   	}
   	
   	private void updateChildAccessibilityAction(View drawerView) {
	
	}
	private void updateChildrenImportantForAccessibility(View drawerView, boolean b) {
	}
	
	public void smoothSlideViewTo(View drawerView, int x, int y) {
	}
	
	public void updateDrawerViewState(  int activeState,  View activeDrawer){
		updateDrawerState(activeState,  activeDrawer);
	}
	
	public void moveDrawerViewToOffset(  View drawerView,  float slideOffset){
		moveDrawerToOffset(drawerView, slideOffset);
	}
	
	public boolean isViewContentView(View view) {
		return isContentView(view);
	}
	
	public boolean requiresToBeOnScreen(View view) {
		return (((DrawerLayout.LayoutParams) view.getLayoutParams())).onScreen == 1;
	}
	
	public boolean isOpening(View drawerView) {
		LayoutParams layoutParams = ((DrawerLayout.LayoutParams)drawerView.getLayoutParams());
		int openState = layoutParams.openState;
		return (openState & LayoutParams.FLAG_IS_OPENING) != 0;
	}
	
	public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) {
        float offset;
        final int childWidth = changedView.getWidth();

        // This reverses the positioning shown in onLayout.
        if (checkDrawerViewAbsoluteGravity(changedView, Gravity.LEFT)) {
            offset = (float) (childWidth + left) / childWidth;
        } else {
            final int width = getWidth();
            offset = (float) (width - left) / childWidth;
        }
        setDrawerViewOffset(changedView, offset);
    }
    
    void setFlagStateOpened(View drawerView){
		final LayoutParams lp=(LayoutParams)drawerView.getLayoutParams();
		lp.openState=LayoutParams.FLAG_IS_OPENED;
	}
}
