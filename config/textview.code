class TextView {
	public final static int UNKNOWN_BORING = 0;
	private String mText = "";
  	public boolean suggestedSizeFitsInSpace(int mAutoSizeTextSizeInPx, RectF availableSpace) {
		return false;
	}
	
	public TextView(com.ashera.widget.IWidget widget) {
		super(widget);
		mTextPaint = new TextPaint();
	}
	
	private int getExtendedPaddingBottom() {
		return getCompoundPaddingBottom();
	}
	
	private int getExtendedPaddingTop() {
		return getCompoundPaddingTop();
	}
	
	protected void makeNewLayout(int availableWidth, int i, int unknownBoring, int unknownBoring2, int j, boolean b) {
	
	}
	protected void setTextSizeInternal(int unit, float optimalTextSize, boolean b) {
	
	}

	protected float getTextSize() {
		return 0;
	}
	
	  public void setUpAutoSizeTextTypeUniform(int autoSizeMin, int autoSizeMax, int autoSizeGranular) {
	  	float autoSizeMinTextSizeInPx = autoSizeMin == UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE ? 
				com.ashera.widget.PluginInvoker.convertSpToPixel(DEFAULT_AUTO_SIZE_MIN_TEXT_SIZE_IN_SP + "sp"): autoSizeMin;
	  	float autoSizeMaxTextSizeInPx = autoSizeMax == UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE ? 
			  	com.ashera.widget.PluginInvoker.convertSpToPixel(DEFAULT_AUTO_SIZE_MAX_TEXT_SIZE_IN_SP + "sp") : autoSizeMax;
		float autoSizeStepGranularityInPx = autoSizeGranular == UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE ? 
  				DEFAULT_AUTO_SIZE_GRANULARITY_IN_PX : autoSizeGranular;
		validateAndSetAutoSizeTextTypeUniformConfiguration(autoSizeMinTextSizeInPx, autoSizeMaxTextSizeInPx,  autoSizeStepGranularityInPx);
		setupAutoSizeText();
  	}
  	
  	public boolean isAutoSizeTextTypeUniform(int autoTextType) {
  		return autoTextType == AUTO_SIZE_TEXT_TYPE_UNIFORM;
  	}
  	
  	public void clearAutoSizeTypeConfiguration() {
  		clearAutoSizeConfiguration();
  	}
  	
  	public void autoResizeText() {
  		autoSizeText();
  	}
	
	static class TypedValue {
		public static int COMPLEX_UNIT_PX = 0;
 		public static float applyDimension(int unit, int i, DisplayMetrics displayMetrics) {
			return 0;
		}
  	}
  	
    private com.ashera.widget.WidgetAttribute widgetAttribute;
    private Object handler;
    private Runnable mTickRunnable;

    public void setWidgetInfo(com.ashera.widget.WidgetAttribute widgetAttribute) {
        this.widgetAttribute = widgetAttribute;
    }

    public void postDelayed(Runnable mTickRunnable, int delay) {
        this.mTickRunnable = mTickRunnable;
        try {
        	handler = com.ashera.widget.PluginInvoker.postDelayed(mTickRunnable, delay);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void removeCallbacks(Runnable mTickRunnable) {
        if (this.mTickRunnable != null && handler != null) {
        	 com.ashera.widget.PluginInvoker.removeCallbacks(handler, mTickRunnable);
        }
    }


    public boolean isShown() {
        return true;
    }
    private String text;
    public void setText(String text) {
    	this.text = text;
        try {
            getWidget().setAttribute(widgetAttribute, text, text, null);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public String getText(){
    	return this.text;
    }

	@Override
	public int measureWidth(int widthMode, int widthSize, int width) {
        if (mMaxWidth != Integer.MAX_VALUE) {
            if (mMaxWidthMode == EMS) {
                width = Math.min(width, mMaxWidth * getLineHeight());
            } else {
                width = Math.min(width, mMaxWidth);
            }
        }

        if (mMinWidth != 0) {
            if (mMinWidthMode == EMS) {
                width = Math.max(width, mMinWidth * getLineHeight());
            } else {
                width = Math.max(width, mMinWidth);
            }
        }
        return width;
    }
    
   	@Override
    public int measureHeight(int heightMode, int heightSize, int height) {
        if (mMaximum != Integer.MAX_VALUE) {
            if (mMaxMode != LINES) {
                height = Math.min(height, mMaximum);
            } else {
                int lineHeightWithPad = getLineHeight() + getLineHeightPadding();
                int borderHeightPadding = (getBorderWidth() * 2) + getBorderPadding();
                int calc = (mMaximum * lineHeightWithPad) + borderHeightPadding;
                if (height < ((lineHeightWithPad) + borderHeightPadding)) {
                	height = (lineHeightWithPad) + borderHeightPadding;
                }
				height = Math.min(height, calc);
            }
        }

        if (mMinimum != 0) {
            if (mMinMode == LINES) {
                height=Math.max(height,(mMinimum * (getLineHeight() + getLineHeightPadding())) + getBorderPadding() + (getBorderWidth() * 2));
            } else {
                height = Math.max(height, mMinimum);
            }
        }
        return height;
    }
    
    public int getLineHeightPadding() {
		return 0;
	}
	public int getBorderPadding() {
		return 0;
	}
	public int getLineHeight() {
		return 0;
	}
	public int getBorderWidth() {
		return 0;
	}

	public Layout.Alignment getAlignmentOfLayout() {
		return getLayoutAlignment();
	}
	
	public boolean hasPasswordTransformationMethod() {
		return false;
	}
	public java.util.Locale getTextLocale() {
        return null;
    }
    public boolean isTypePhone() {
		return false;
	}
	public String[] getDigitStrings(DecimalFormatSymbols symbols) {
		return null;
	}
	interface Editor {
	 void invalidateTextDisplayList();
	}
	public class TextPaint {
		public int linkColor;
	}
	
	public final ColorStateList getTextColors() {
        return mTextColor;
    }
    
    interface Drawables {
    	java.util.List<Drawable> mShowing = null;
    }
    private void invalidateDrawable(Drawable dr) {
	}		
}