options {
CHOICE_AMBIGUITY_CHECK=3;
	OTHER_AMBIGUITY_CHECK=2;
	//DEBUG_PARSER=true
	//DEBUG_LOOKAHEAD=true
	//DEBUG_TOKEN_MANAGER=true
	ERROR_REPORTING=true;
	JAVA_UNICODE_ESCAPE=true;
	UNICODE_INPUT=true;
	IGNORE_CASE=true;
	SUPPORT_CLASS_VISIBILITY_PUBLIC=false;
	FORCE_LA_CHECK=true;
	CACHE_TOKENS=true;
  SANITY_CHECK = true;
STATIC=false;
}
PARSER_BEGIN(Evaluator)
package com.ashera.css;
import com.ashera.css.CssTree.Attribute;
import com.ashera.parser.css.CssResult;
public class Evaluator {
    public static void main(String[] args) throws Exception {
        CssTree cssTree = new CssTree();
        new Evaluator(new java.io.StringReader("@font-face {url: a22; font-weight: normal; } @font-face {url: 222; font-weight: normal; }")).S(cssTree);
        cssTree.getCss("", "div", "test test1", "test2", new CssResult() {
                        @Override
                        public void put(String key, Attribute value) {
                                System.out.println("key1" + key + value.value);
                        }
                });
    }
}

PARSER_END(Evaluator)

SKIP:  { " " | "\t" | "\n" | "\r"                    }
TOKEN: 
{
<MEDIA: "@media only screen and ">
| <AND_TOKEN: "and ">
}
TOKEN: 
{
<ANY: "a">
| <orientation : ("h" | "v" | "H" | "V")>
| <superview : "|">
| <relation : "==" | "<=" | ">=">
| <CSS_VAR: (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_"| "-" | "#" | "." | "@")+>
| <OPEN_BRACKET:"{">
| <CLOSE_BRACKET:"}">
| <COLON:":">
| <SEMI_COLON:";">
|<CSS_VAR_WHITE_SPACE : "\""(["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_"| "-" | "#" | "." | "@" | " "|"/")+"\"">
} 



void S(CssTree v): {String value;}
{	
	(<MEDIA>
	{String gaurdValues = "";
	String gaurdKeys = "";}
	("("
	<CSS_VAR> 
	{gaurdKeys = gaurdKeys + "," + token.image;}
	":" <CSS_VAR>
	{gaurdValues = gaurdValues + "," + token.image;}
	")" (<AND_TOKEN>)?)* "{"
	(
	connection(v, gaurdKeys, gaurdValues)
	)*
	"}"
	|
	connection(v, "default", "default")	
	)*
	<EOF>

}

void connection(CssTree v, String gaurdKeys, String gaurdValues): {}
{
	<CSS_VAR>
	{String attributeName = token.image;}
	<OPEN_BRACKET>
	(<CSS_VAR>
	{String key = token.image;}
	<COLON>
	(
	<CSS_VAR_WHITE_SPACE>	
	|
	<CSS_VAR>)
	{v.setAttribute(gaurdKeys, gaurdValues, attributeName, key, token.image);}
	<SEMI_COLON>)*
	<CLOSE_BRACKET>
	{v.end();}
}

